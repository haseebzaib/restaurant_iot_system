/*
 * st7789.h
 *
 *  Created on: Jul 16, 2024
 *      Author: hzaib
 */

#ifndef ST7789_H_
#define ST7789_H_
#include <stdint.h>

/* POSIX Header files */
#include <pthread.h>

/* RTOS header files */
#include <ti/sysbios/BIOS.h>

#include <ti/drivers/Board.h>
#include "fonts.h"
#include "UGUI/ugui.h"

#define HAL_Delay(x) usleep(x*800)
/* choose whether use DMA or not */
//#define USE_DMA

/* If u need CS control, comment below*/
//#define CFG_NO_CS

/* Choose a type you are using */
//#define USING_135X240
#define USING_240X240
//#define USING_170X320

/* Choose a display rotation you want to use: (0-3) */
//#define ST7789_ROTATION 0
//#define ST7789_ROTATION 1


#define ST7789_ROTATION 2               //  use Normally on 240x240
//#define ST7789_ROTATION 3

#ifdef USING_135X240

    #if ST7789_ROTATION == 0
        #define ST7789_WIDTH 135
        #define ST7789_HEIGHT 240
        #define X_SHIFT 53
        #define Y_SHIFT 40
    #endif

    #if ST7789_ROTATION == 1
        #define ST7789_WIDTH 240
        #define ST7789_HEIGHT 135
        #define X_SHIFT 40
        #define Y_SHIFT 52
    #endif

    #if ST7789_ROTATION == 2
        #define ST7789_WIDTH 135
        #define ST7789_HEIGHT 240
        #define X_SHIFT 52
        #define Y_SHIFT 40
    #endif

    #if ST7789_ROTATION == 3
        #define ST7789_WIDTH 240
        #define ST7789_HEIGHT 135
        #define X_SHIFT 40
        #define Y_SHIFT 53
    #endif

#endif

#ifdef USING_240X240

    #define ST7789_WIDTH 240
    #define ST7789_HEIGHT 296

        #if ST7789_ROTATION == 0
            #define X_SHIFT 0
            #define Y_SHIFT 80
        #elif ST7789_ROTATION == 1
            #define X_SHIFT 80
            #define Y_SHIFT 0
        #elif ST7789_ROTATION == 2
            #define X_SHIFT 0
            #define Y_SHIFT 0
        #elif ST7789_ROTATION == 3
            #define X_SHIFT 0
            #define Y_SHIFT 0
        #endif

#endif

#ifdef USING_170X320

    #if ST7789_ROTATION == 0
        #define ST7789_WIDTH 170
        #define ST7789_HEIGHT 320
        #define X_SHIFT 35
        #define Y_SHIFT 0
    #endif

    #if ST7789_ROTATION == 1
        #define ST7789_WIDTH 320
        #define ST7789_HEIGHT 170
        #define X_SHIFT 0
        #define Y_SHIFT 35
    #endif

    #if ST7789_ROTATION == 2
        #define ST7789_WIDTH 170
        #define ST7789_HEIGHT 320
        #define X_SHIFT 35
        #define Y_SHIFT 0
    #endif

    #if ST7789_ROTATION == 3
        #define ST7789_WIDTH 320
        #define ST7789_HEIGHT 170
        #define X_SHIFT 0
        #define Y_SHIFT 35
    #endif

#endif

/**
 *Color of pen
 *If you want to use another color, you can choose one in RGB565 format.
 */

#define WHITE       0xFFFF
#define BLACK       0x0000
#define BLUE        0x001F
#define RED         0xF800
#define MAGENTA     0xF81F
#define GREEN       0x07E0
#define CYAN        0x7FFF
#define YELLOW      0xFFE0
#define GRAY        0X8430
#define BRED        0XF81F
#define GRED        0XFFE0
#define GBLUE       0X07FF
#define BROWN       0XBC40
#define BRRED       0XFC07
#define DARKBLUE    0X01CF
#define LIGHTBLUE   0X7D7C
#define GRAYBLUE    0X5458

#define LIGHTGREEN  0X841F
#define LGRAY       0XC618
#define LGRAYBLUE   0XA651
#define LBBLUE      0X2B12

/* Control Registers and constant codes */
#define ST7789_NOP     0x00
#define ST7789_SWRESET 0x01
#define ST7789_RDDID   0x04
#define ST7789_RDDST   0x09

#define ST7789_SLPIN   0x10
#define ST7789_SLPOUT  0x11
#define ST7789_PTLON   0x12
#define ST7789_NORON   0x13

#define ST7789_INVOFF  0x20
#define ST7789_INVON   0x21
#define ST7789_DISPOFF 0x28
#define ST7789_DISPON  0x29
#define ST7789_CASET   0x2A
#define ST7789_RASET   0x2B
#define ST7789_RAMWR   0x2C
#define ST7789_RAMRD   0x2E

#define ST7789_PTLAR   0x30
#define ST7789_COLMOD  0x3A
#define ST7789_MADCTL  0x36

/**
 * Memory Data Access Control Register (0x36H)
 * MAP:     D7  D6  D5  D4  D3  D2  D1  D0
 * param:   MY  MX  MV  ML  RGB MH  -   -
 *
 */

/* Page Address Order ('0': Top to Bottom, '1': the opposite) */
#define ST7789_MADCTL_MY  0x80
/* Column Address Order ('0': Left to Right, '1': the opposite) */
#define ST7789_MADCTL_MX  0x40
/* Page/Column Order ('0' = Normal Mode, '1' = Reverse Mode) */
#define ST7789_MADCTL_MV  0x20
/* Line Address Order ('0' = LCD Refresh Top to Bottom, '1' = the opposite) */
#define ST7789_MADCTL_ML  0x10
/* RGB/BGR Order ('0' = RGB, '1' = BGR) */
#define ST7789_MADCTL_RGB 0x00

#define ST7789_RDID1   0xDA
#define ST7789_RDID2   0xDB
#define ST7789_RDID3   0xDC
#define ST7789_RDID4   0xDD

/* Advanced options */
#define ST7789_COLOR_MODE_16bit 0x55    //  RGB565 (16bit)
#define ST7789_COLOR_MODE_18bit 0x66    //  RGB666 (18bit)


#define ABS(x) ((x) > 0 ? (x) : -(x))

#define CHAR_WIDTH 6
#define CHAR_HEIGHT 8

static const unsigned char font[96][6] = {
    {0x00,0x00,0x00,0x00,0x00,0x00}, //
    {0x5c,0x00,0x00,0x00,0x00,0x00}, // !
    {0x06,0x00,0x06,0x00,0x00,0x00}, // "
    {0x28,0x7c,0x28,0x7c,0x28,0x00}, // #
    {0x5c,0x54,0xfe,0x54,0x74,0x00}, // $
    {0x44,0x20,0x10,0x08,0x44,0x00}, // %
    {0x28,0x54,0x54,0x20,0x50,0x00}, // &
    {0x06,0x00,0x00,0x00,0x00,0x00}, // '
    {0x38,0x44,0x00,0x00,0x00,0x00}, // (
    {0x44,0x38,0x00,0x00,0x00,0x00}, // )
    {0x02,0x07,0x02,0x00,0x00,0x00}, // *
    {0x10,0x10,0x7c,0x10,0x10,0x00}, // +
    {0xc0,0x00,0x00,0x00,0x00,0x00}, // ,
    {0x10,0x10,0x10,0x10,0x10,0x00}, // -
    {0x40,0x00,0x00,0x00,0x00,0x00}, // .
    {0x60,0x10,0x0c,0x00,0x00,0x00}, // /
    {0x7c,0x64,0x54,0x4c,0x7c,0x00}, // 0
    {0x48,0x7c,0x40,0x00,0x00,0x00}, // 1
    {0x64,0x54,0x54,0x54,0x48,0x00}, // 2
    {0x44,0x54,0x54,0x54,0x6c,0x00}, // 3
    {0x3c,0x20,0x70,0x20,0x20,0x00}, // 4
    {0x5c,0x54,0x54,0x54,0x24,0x00}, // 5
    {0x7c,0x54,0x54,0x54,0x74,0x00}, // 6
    {0x04,0x04,0x64,0x14,0x0c,0x00}, // 7
    {0x7c,0x54,0x54,0x54,0x7c,0x00}, // 8
    {0x5c,0x54,0x54,0x54,0x7c,0x00}, // 9
    {0x44,0x00,0x00,0x00,0x00,0x00}, // :
    {0xc4,0x00,0x00,0x00,0x00,0x00}, // ;
    {0x10,0x28,0x44,0x00,0x00,0x00}, // <
    {0x28,0x28,0x28,0x28,0x28,0x00}, // =
    {0x44,0x28,0x10,0x00,0x00,0x00}, // >
    {0x08,0x04,0x54,0x08,0x00,0x00}, // ?
    {0x7c,0x44,0x54,0x54,0x5c,0x00}, // @
    {0x7c,0x24,0x24,0x24,0x7c,0x00}, // A
    {0x7c,0x54,0x54,0x54,0x6c,0x00}, // B
    {0x7c,0x44,0x44,0x44,0x44,0x00}, // C
    {0x7c,0x44,0x44,0x44,0x38,0x00}, // D
    {0x7c,0x54,0x54,0x54,0x44,0x00}, // E
    {0x7c,0x14,0x14,0x14,0x04,0x00}, // F
    {0x7c,0x44,0x44,0x54,0x74,0x00}, // G
    {0x7c,0x10,0x10,0x10,0x7c,0x00}, // H
    {0x44,0x44,0x7c,0x44,0x44,0x00}, // I
    {0x60,0x40,0x40,0x44,0x7c,0x00}, // J
    {0x7c,0x10,0x10,0x28,0x44,0x00}, // K
    {0x7c,0x40,0x40,0x40,0x40,0x00}, // L
    {0x7c,0x08,0x10,0x08,0x7c,0x00}, // M
    {0x7c,0x08,0x10,0x20,0x7c,0x00}, // N
    {0x38,0x44,0x44,0x44,0x38,0x00}, // O
    {0x7c,0x14,0x14,0x14,0x08,0x00}, // P
    {0x3c,0x24,0x64,0x24,0x3c,0x00}, // Q
    {0x7c,0x14,0x14,0x14,0x68,0x00}, // R
    {0x5c,0x54,0x54,0x54,0x74,0x00}, // S
    {0x04,0x04,0x7c,0x04,0x04,0x00}, // T
    {0x7c,0x40,0x40,0x40,0x7c,0x00}, // U
    {0x0c,0x30,0x40,0x30,0x0c,0x00}, // V
    {0x3c,0x40,0x30,0x40,0x3c,0x00}, // W
    {0x44,0x28,0x10,0x28,0x44,0x00}, // X
    {0x0c,0x10,0x60,0x10,0x0c,0x00}, // Y
    {0x44,0x64,0x54,0x4c,0x44,0x00}, // Z
    {0x7c,0x44,0x00,0x00,0x00,0x00}, // [
    {0x0c,0x10,0x60,0x00,0x00,0x00}, // "\"
    {0x44,0x7c,0x00,0x00,0x00,0x00}, // ]
    {0x00,0x01,0x00,0x01,0x00,0x00}, // ^
    {0x40,0x40,0x40,0x40,0x40,0x40}, // _
    {0x00,0x01,0x00,0x00,0x00,0x00}, // `
    {0x7c,0x24,0x24,0x24,0x7c,0x00}, // a
    {0x7c,0x54,0x54,0x54,0x6c,0x00}, // b
    {0x7c,0x44,0x44,0x44,0x44,0x00}, // c
    {0x7c,0x44,0x44,0x44,0x38,0x00}, // d
    {0x7c,0x54,0x54,0x54,0x44,0x00}, // e
    {0x7c,0x14,0x14,0x14,0x04,0x00}, // f
    {0x7c,0x44,0x44,0x54,0x74,0x00}, // g
    {0x7c,0x10,0x10,0x10,0x7c,0x00}, // h
    {0x44,0x44,0x7c,0x44,0x44,0x00}, // i
    {0x60,0x40,0x40,0x44,0x7c,0x00}, // j
    {0x7c,0x10,0x10,0x28,0x44,0x00}, // k
    {0x7c,0x40,0x40,0x40,0x40,0x00}, // l
    {0x7c,0x08,0x10,0x08,0x7c,0x00}, // m
    {0x7c,0x08,0x10,0x20,0x7c,0x00}, // n
    {0x38,0x44,0x44,0x44,0x38,0x00}, // o
    {0x7c,0x14,0x14,0x14,0x08,0x00}, // p
    {0x3c,0x24,0x64,0x24,0x3c,0x00}, // q
    {0x7c,0x14,0x14,0x14,0x68,0x00}, // r
    {0x5c,0x54,0x54,0x54,0x74,0x00}, // s
    {0x04,0x04,0x7c,0x04,0x04,0x00}, // t
    {0x7c,0x40,0x40,0x40,0x7c,0x00}, // u
    {0x0c,0x30,0x40,0x30,0x0c,0x00}, // v
    {0x3c,0x40,0x30,0x40,0x3c,0x00}, // w
    {0x44,0x28,0x10,0x28,0x44,0x00}, // x
    {0x0c,0x10,0x60,0x10,0x0c,0x00}, // y
    {0x44,0x64,0x54,0x4c,0x44,0x00}, // z
    {0x10,0x7c,0x44,0x00,0x00,0x00}, // {
    {0x6c,0x00,0x00,0x00,0x00,0x00}, // |
    {0x44,0x7c,0x10,0x00,0x00,0x00}, // }
    {0x02,0x01,0x02,0x01,0x00,0x00}, // ~
    {0x00,0x00,0x00,0x00,0x00,0x00}
};

extern void Display_init_lvgl(int rotation,uint_least8_t spi_index);
extern void ST7789_Init(uint_least8_t spi_index);
extern void ST7789_SetRotation(uint8_t m);
extern void ST7789_Fill_Color(uint16_t color);
//extern void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color);
extern void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color);
extern void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color);
extern void ST7789_DrawPixel_4px(uint16_t x, uint16_t y, uint16_t color);

/* Graphical functions. */
extern void ST7789_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
extern void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
extern void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color);
extern void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data);
extern void ST7789_InvertColors(uint8_t invert);

/* Text functions. */
extern void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);
extern void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor);
void ST7789_DrawPixelFB(int16_t x, int16_t y, uint16_t color);
void ST7789_Update(void);
/* Extented Graphical functions. */
extern void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color);
extern void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color);
extern void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color);
extern void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
extern void ST7789_clearbuffer();
extern void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor);
void ILI9341_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour);
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour);
/* Command functions */
extern void ST7789_TearEffect(uint8_t tear);

void ST7789_Send_Data_DMA(uint16_t x, uint16_t y, uint16_t x_end, uint16_t y_end, uint8_t *p);
extern UG_BMP fry ;

void ST7789_Test(void);
void LCD_Test();
#endif /* ST7789_H_ */
